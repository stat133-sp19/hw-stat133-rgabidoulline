### Binomial Functions and Methods
## Author: Ruslan Gabidoulline

###
# load required functions
source("private-checker-functions.R")
source("private-auxiliary-functions.R")

###

#' @title Choose
#' @description Calculates the number of combinations in which k successes can occur in n trials
#' @param n number of trials
#' @param k number of successes
#' @return number of combinations in which k successes can occur in n trials
#' @export
#' @examples
#' # k = 2 successes in n = 5 trials
#' 5choose2 = bin_choose(n = 5, k = 2)
#'
#' # k = 3 successes in n = 8 trials
#' 8choose3 = bin_choose(8, 3)
#'
#' # k = 1 to 3 successes in n = 5 trials
#' bin_choose(5, 1:3)
bin_choose = function(n, k) {
for (i in 1:length(k)) {
  if (k[i] > n) {
    stop("k cannot be greater than n")
  }
}
  choose = factorial(n) / (factorial(k)*factorial(n - k))
  return(choose)
}


#' @title Binomial Probability
#' @description Calculates the probability of getting successes in trials
#' @param success number of successes
#' @param trials number of trials
#' @param prob probability of success
#' @return binomial probability
#' @export
#' @examples
#' # probability of getting 2 successes in 5 trials
#' bin_probability(success = 2, trials = 5, prob = 0.5)
#'
#' # probability of 2 or less successes in 5 trials
#' bin_probability(success = 0:2, trials = 5, prob = 0.5)
bin_probability = function(success, trials, prob) {
  check_trials(trials)
  check_success(success, trials)
  check_prob(prob)

  bin = bin_choose(trials, success) * prob^success * (1 - prob)^(trials - success)
  return(bin)
}


#' @title Binomial Distribution
#' @description Returns a table of the binomial distribution over all possible successes for a certain number of trials
#' @param trials number of trials
#' @param prob probability of success
#' @return probability of success for all successes given number of trials
#' @export
#' @examples
#' # binomial probability distribution
#' bin_distribution(trials = 5, prob = 0.5)
bin_distribution = function(trials, prob) {
  check_trials(trials)
  check_prob(prob)

  success = 0:trials
  probability = bin_probability(success, trials, prob)
  dist = data.frame(success, probability)
  class(dist) = c("bindis", "data.frame")
  return(dist)
}


# Function plot.bindis() [method]
#' @export
plot.bindis = function(bindis) {
  barplot(bindis$probability,
          names.arg = bindis$success,
          xlab = "successes", ylab = "probability")
}


#' @title Binomial Cumulative Distribution
#' @description Returns a table of the binomial probability distribution and the cumulative probability distribution.
#' @param trials number of trials
#' @param prob probability of success
#' @return table with probability distribution and cumulative distribution
#' @export
#' @examples
#' # binomial cumulative distribution
#' bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative = function(trials, prob) {
  check_trials(trials)
  check_prob(prob)

  success = 0:trials
  probability = bin_probability(success, trials, prob)
  cumulative = rep(0, length(success))
  cumulative[1] = probability[1]
  for (i in 2:length(cumulative)) {
    cumulative[i] = cumulative[i-1] + probability[i]
  }
  dist = data.frame(success, probability, cumulative)
  class(dist) = c("bincum", "data.frame")
  return(dist)
}


# Function plot.bincum() [method]
#' @export
plot.bincum = function(bincum) {
  plot(x = bincum$success, y = bincum$cumulative,
       type = "o",
       xlab = "successes", ylab = "probability")
}


#' @title Binomial Random Variable
#' @description Creates a binomial random variable object given number of trials and probability
#' @param trials number of trials
#' @param prob probability of success
#' @return object of class "binvar", a binomial random variable
#' @export
#' @examples
#' # print bin_variable
#' bin1 = bin_variable(trials = 10, p = 0.3)
#' bin1
bin_variable = function(trials, prob) {
  check_trials(trials)
  check_prob(prob)

  var = list(trials = trials, prob = prob)
  class(var) = "binvar"
  return(var)
}


# Function print.binvar() [method]
#' @export
print.binvar = function(x, ...) {
  cat('"Binomial Variable"\n\n')
  cat("Parameters", "\n")
  cat("- number of trials:", x$trials, "\n")
  cat("- prob of success:", x$prob, "\n")
  invisible(x)
}


# Function summary.binvar() [method]
#' @export
summary.binvar = function(x, ...) {
  summary = list(trials = x$trials, prob = x$prob,
                 mean = aux_mean(x$trials, x$prob),
                 variance = aux_variance(x$trials, x$prob),
                 mode = aux_mode(x$trials, x$prob),
                 skewness = aux_skewness(x$trials, x$prob),
                 kurtosis = aux_kurtosis(x$trials, x$prob))
  class(summary) = "summary.binvar"
  return(summary)
}


# Function print.summary.binvar() [method]
#' @export
print.summary.binvar = function(x, ...) {
  cat('"Summary Binomial"\n\n')
  cat("Parameters", "\n")
  cat("- number of trials:", x$trials, "\n")
  cat("- prob of success:", x$prob, "\n\n")
  cat("Measures", "\n")
  cat("- mean    :", x$mean, "\n")
  cat("- variance:", x$variance, "\n")
  cat("- mode    :", x$mode, "\n")
  cat("- skewness:", x$skewness, "\n")
  cat("- kurtosis:", x$kurtosis, "\n")
  invisible(x)
}

