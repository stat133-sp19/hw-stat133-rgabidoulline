}
bin_probability(2, 5, -1)
bin_probability = function(success, trials, prob) {
if (check_trials(trials) == FALSE) {
stop("invalid trials value")
}
if (check_success(success, trials) == FALSE) {
stop("invalid success value")
}
if (check_prob(prob) == FALSE) {
stop("invalid prob value")
}
bin = bin_choose(trials, success) * prob^success * (1 - prob)^(trials - success)
return(bin)
}
bin_probability(2, 5, -1)
test_that("bin_choose fails with invalid values of n and k", {
n = 8
k = 10
expect_error(bin_choose(n, k), "k cannot be greater than n")
})
test_that("bin_probability fails with invalid values of success, trials, and prob", {
expect_error(bin_probability(2, 5, -1), "invalid prob value")
})
summary.binvar(X)
bin_distribution(X)
bin_distribution(5, 0.5)
dbinom(5,.5)
dbinom(0, 5, .5)
dbinom(0:5, 5, .5)
test_that("bin_distribution works with valid values of trials and prob", {
trials = 5
prob = 0.5
expect_equal(bin_distribution(trials, prob)$success, (0:success))
expect_equal(bin_distribution(trials, prob)$probability, (dbinom(0:trials, prob)))
expect_gte(bin_distribution(trials, prob)$probability, 0)
expect_lte(bin_distribution(trials, prob)$probability, 1)
expect_length(bin_distribution(trials, prob)$success, (trials + 1))
expect_length(bin_distribution(trials, prob)$probability, (trials + 1))
expect_is(bin_distribution(trials, prob), c("bindis", "data.frame"))
})
test_that("bin_distribution works with valid values of trials and prob", {
trials = 5
prob = 0.5
expect_equal(bin_distribution(trials, prob)$success, (0:success))
expect_equal(bin_distribution(trials, prob)$probability, (dbinom(0:trials, trials, prob)))
expect_gte(bin_distribution(trials, prob)$probability, 0)
expect_lte(bin_distribution(trials, prob)$probability, 1)
expect_length(bin_distribution(trials, prob)$success, (trials + 1))
expect_length(bin_distribution(trials, prob)$probability, (trials + 1))
expect_is(bin_distribution(trials, prob), c("bindis", "data.frame"))
})
test_that("bin_distribution works with valid values of trials and prob", {
trials = 5
prob = 0.5
expect_equal(bin_distribution(trials, prob)$success, (0:trials))
expect_equal(bin_distribution(trials, prob)$probability, (dbinom(0:trials, trials, prob)))
expect_gte(bin_distribution(trials, prob)$probability, 0)
expect_lte(bin_distribution(trials, prob)$probability, 1)
expect_length(bin_distribution(trials, prob)$success, (trials + 1))
expect_length(bin_distribution(trials, prob)$probability, (trials + 1))
expect_is(bin_distribution(trials, prob), c("bindis", "data.frame"))
})
test_that("bin_distribution works with valid values of trials and prob", {
trials = 5
prob = 0.5
expect_equal(bin_distribution(trials, prob)$success, (0:trials))
expect_equal(bin_distribution(trials, prob)$probability, (dbinom(0:trials, trials, prob)))
for (i in 1:(trials+1)) {
expect_gte(bin_distribution(trials, prob)$probability[i], 0)
expect_lte(bin_distribution(trials, prob)$probability[i], 1)
}
expect_length(bin_distribution(trials, prob)$success, (trials + 1))
expect_length(bin_distribution(trials, prob)$probability, (trials + 1))
expect_is(bin_distribution(trials, prob), c("bindis", "data.frame"))
})
bin_cumulative(X)
bin_cumulative(5,.5)
test_that("bin_cumulative works with valid values of trials and prob", {
trials = 5
prob = 0.5
expect_equal(bin_cumulative(trials, prob)$success, (0:trials))
expect_equal(bin_cumulative(trials, prob)$probability, (dbinom(0:trials, trials, prob)))
expect_equal(bin_cumulative(trials, prob)$cumulative, (pbinom(0:trials, trials, prob)))
for (i in 1:(trials+1)) {
expect_gte(bin_cumulative(trials, prob)$probability[i], 0)
expect_lte(bin_cumulative(trials, prob)$probability[i], 1)
expect_gte(bin_cumulative(trials, prob)$cumulative[i], 0)
expect_lte(bin_cumulative(trials, prob)$cumulative[i], 1)
}
expect_length(bin_cumulative(trials, prob)$success, (trials + 1))
expect_length(bin_cumulative(trials, prob)$probability, (trials + 1))
expect_length(bin_cumulative(trials, prob)$cumulative, (trials + 1))
expect_is(bin_distribution(trials, prob), c("bincum", "data.frame"))
})
test_that("bin_probability fails with invalid values of success, trials, and prob", {
expect_error(bin_probability(2, 5, -1), "invalid prob value")
})
bin_probability(2, 5, -1)
test_that("bin_probability fails with invalid values of success, trials, and prob", {
expect_error(bin_probability(2, 5, -1), "invalid prob value")
})
bin_probability = function(success, trials, prob) {
check_trials(trials)
check_success(success, trials)
check_prob(prob)
bin = bin_choose(trials, success) * prob^success * (1 - prob)^(trials - success)
return(bin)
}
bin_probability(-1, 5, .5)
bin_variable = function(trials, prob) {
check_trials(trials)
check_prob(prob)
var = list(trials = trials, prob = prob)
class(var) = "binvar"
return(var)
}
test_that("bin_probability fails with invalid values of success, trials, and prob", {
expect_error(bin_probability(1, 5, -1), "prob has to be a number between 0 and 1")
expect_error(bin_probability(1, 5, 2), "prob has to be a number between 0 and 1")
expect_error(bin_probability(1, 5, "a"), "prob must be a number")
expect_error(bin_probability(1, 5, 1:100), "prob must have length 1")
})
bin_probability(1, -5, 0.5)
test_that("bin_probability fails with invalid values of success, trials, and prob", {
expect_error(bin_probability(1, 5, -1), "prob has to be a number between 0 and 1")
expect_error(bin_probability(1, 5, 2), "prob has to be a number between 0 and 1")
expect_error(bin_probability(1, 5, "a"), "prob must be a number")
expect_error(bin_probability(1, 5, 1:100), "prob must have length 1")
expect_error(bin_probability(1, -5, 0.5), "trials cannot be negative")
expect_error(bin_probability(1, "a", 0.5), "trials must be a number")
expect_error(bin_probability(1, 1:100, 0.5), "trials must have length 1")
expect_error(bin_probability(1, 1.2, 0.5), "trials must be an integer")
})
check_trials("a")
check_trials = function(trials) {
if (length(trials) != 1) {
stop("trials must have length 1")
}
if (is.numeric(trials) == FALSE) {
stop("trials must be a number")
}
if (floor(trials) != trials) {
stop("trials must be an integer")
} else if (0 <= trials) {
return(TRUE)
} else {
stop("trials cannot be negative")
}
}
test_that("bin_probability fails with invalid values of success, trials, and prob", {
expect_error(bin_probability(1, 5, -1), "prob has to be a number between 0 and 1")
expect_error(bin_probability(1, 5, 2), "prob has to be a number between 0 and 1")
expect_error(bin_probability(1, 5, "a"), "prob must be a number")
expect_error(bin_probability(1, 5, 1:100), "prob must have length 1")
expect_error(bin_probability(1, -5, 0.5), "trials cannot be negative")
expect_error(bin_probability(1, "a", 0.5), "trials must be a number")
expect_error(bin_probability(1, 1:100, 0.5), "trials must have length 1")
expect_error(bin_probability(1, 1.2, 0.5), "trials must be an integer")
})
test_that("bin_probability fails with invalid values of success, trials, and prob", {
expect_error(bin_probability(1, 5, -1), "prob has to be a number between 0 and 1")
expect_error(bin_probability(1, 5, 2), "prob has to be a number between 0 and 1")
expect_error(bin_probability(1, 5, "a"), "prob must be a number")
expect_error(bin_probability(1, 5, 1:100), "prob must have length 1")
expect_error(bin_probability(1, -5, 0.5), "trials cannot be negative")
expect_error(bin_probability(1, "a", 0.5), "trials must be a number")
expect_error(bin_probability(1, 1:100, 0.5), "trials must have length 1")
expect_error(bin_probability(1, 1.2, 0.5), "trials must be an integer")
expect_error(bin_probability(-1, 5, 0.5), "success cannot be negative")
expect_error(bin_probability(-1:4, 5, 0.5), "success cannot be negative")
expect_error(bin_probability("a", 3, 0.5), "success must be a number")
expect_error(bin_probability(5, 4, 0.5), "success cannot be greater than trials")
expect_error(bin_probability(1:5, 4, 0.5), "success cannot be greater than trials")
expect_error(bin_probability(1.2, 5, 0.5), "success must be an integer")
expect_error(bin_probability(c(1, 1.2, 3), 5, 0.5), "success must be an integer")
})
bin_distribution(-1, 2)
test_that("bin_distribution fails with invalid values of trials and prob" {
expect_error(bin_distribution(1, 5, -1), "prob has to be a number between 0 and 1")
expect_error(bin_distribution(1, 5, 2), "prob has to be a number between 0 and 1")
expect_error(bin_distribution(1, 5, "a"), "prob must be a number")
expect_error(bin_distribution(1, 5, 1:100), "prob must have length 1")
expect_error(bin_distribution(1, -5, 0.5), "trials cannot be negative")
expect_error(bin_distribution(1, "a", 0.5), "trials must be a number")
expect_error(bin_distribution(1, 1:100, 0.5), "trials must have length 1")
expect_error(bin_distribution(1, 1.2, 0.5), "trials must be an integer")
})
test_that("bin_distribution fails with invalid values of trials and prob" {
expect_error(bin_distribution(5, -1), "prob has to be a number between 0 and 1")
expect_error(bin_distribution(5, 2), "prob has to be a number between 0 and 1")
expect_error(bin_distribution(5, "a"), "prob must be a number")
expect_error(bin_distribution(5, 1:100), "prob must have length 1")
expect_error(bin_distribution(-5, 0.5), "trials cannot be negative")
expect_error(bin_distribution("a", 0.5), "trials must be a number")
expect_error(bin_distribution(1:100, 0.5), "trials must have length 1")
expect_error(bin_distribution(1.2, 0.5), "trials must be an integer")
})
bin_distribution("a", 0.5)
bin_distribution = function(trials, prob) {
check_trials(trials)
check_prob(prob)
success = 0:trials
probability = bin_probability(success, trials, prob)
dist = data.frame(success, probability)
class(dist) = c("bindis", "data.frame")
return(dist)
}
test_that("bin_distribution fails with invalid values of trials and prob" {
expect_error(bin_distribution(5, -1), "prob has to be a number between 0 and 1")
expect_error(bin_distribution(5, 2), "prob has to be a number between 0 and 1")
expect_error(bin_distribution(5, "a"), "prob must be a number")
expect_error(bin_distribution(5, 1:100), "prob must have length 1")
expect_error(bin_distribution(-5, 0.5), "trials cannot be negative")
expect_error(bin_distribution("a", 0.5), "trials must be a number")
expect_error(bin_distribution(1:100, 0.5), "trials must have length 1")
expect_error(bin_distribution(1.2, 0.5), "trials must be an integer")
})
test_that("bin_distribution fails with invalid values of trials and prob", {
expect_error(bin_distribution(5, -1), "prob has to be a number between 0 and 1")
expect_error(bin_distribution(5, 2), "prob has to be a number between 0 and 1")
expect_error(bin_distribution(5, "a"), "prob must be a number")
expect_error(bin_distribution(5, 1:100), "prob must have length 1")
expect_error(bin_distribution(-5, 0.5), "trials cannot be negative")
expect_error(bin_distribution("a", 0.5), "trials must be a number")
expect_error(bin_distribution(1:100, 0.5), "trials must have length 1")
expect_error(bin_distribution(1.2, 0.5), "trials must be an integer")
})
bin_cumulative = function(trials, prob) {
check_trials(trials)
check_prob(prob)
success = 0:trials
probability = bin_probability(success, trials, prob)
cumulative = rep(0, length(success))
cumulative[1] = probability[1]
for (i in 2:length(cumulative)) {
cumulative[i] = cumulative[i-1] + probability[i]
}
dist = data.frame(success, probability, cumulative)
class(dist) = c("bincum", "data.frame")
return(dist)
}
test_that("bin_cumulative fails with invalid values of trials and prob", {
expect_error(bin_cumulative(5, -1), "prob has to be a number between 0 and 1")
expect_error(bin_cumulative(5, 2), "prob has to be a number between 0 and 1")
expect_error(bin_cumulative(5, "a"), "prob must be a number")
expect_error(bin_cumulative(5, 1:100), "prob must have length 1")
expect_error(bin_cumulative(-5, 0.5), "trials cannot be negative")
expect_error(bin_cumulative("a", 0.5), "trials must be a number")
expect_error(bin_cumulative(1:100, 0.5), "trials must have length 1")
expect_error(bin_cumulative(1.2, 0.5), "trials must be an integer")
})
library(testthat)
library(binomial)
test_check("binomial")
install.packages("devtools")
bin_choose = function(n, k) {
for (i in 1:length(k)) {
if (k[i] > n) {
stop("k cannot be greater than n")
}
}
choose = factorial(n) / (factorial(k)*factorial(n - k))
return(choose)
}
summary.binvar(X)
devtools::document()
pwd()
getwd()
setwd("../")
devtools::document()
setwd("../")
devtools::document()
setwd("./binomial")
devtools::document()
source("private-checker-functions.R")
source("private-auxiliary-functions.R")
source("./R/private-checker-functions.R")
source("./R/private-auxiliary-functions.R")
source("./R/private-checker-functions.R")
source("./R/private-auxiliary-functions.R")
devtools::document()
devtools::document()
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build_vignettes()
###
# load required functions
source("./R/private-checker-functions.R")
### Binomial Functions and Methods
## Author: Ruslan Gabidoulline
###
# load required functions
source("./R/private-checker-functions.R")
source("./R/private-auxiliary-functions.R")
###
#' @title Choose
#' @description Calculates the number of combinations in which k successes can occur in n trials
#' @param n number of trials
#' @param k number of successes
#' @return number of combinations in which k successes can occur in n trials
#' @export
#' @examples
#' # k = 2 successes in n = 5 trials
#' 5choose2 = bin_choose(n = 5, k = 2)
#'
#' # k = 3 successes in n = 8 trials
#' 8choose3 = bin_choose(8, 3)
#'
#' # k = 1 to 3 successes in n = 5 trials
#' bin_choose(5, 1:3)
bin_choose = function(n, k) {
for (i in 1:length(k)) {
if (k[i] > n) {
stop("k cannot be greater than n")
}
}
choose = factorial(n) / (factorial(k)*factorial(n - k))
return(choose)
}
#' @title Binomial Probability
#' @description Calculates the probability of getting successes in trials
#' @param success number of successes
#' @param trials number of trials
#' @param prob probability of success
#' @return binomial probability
#' @export
#' @examples
#' # probability of getting 2 successes in 5 trials
#' bin_probability(success = 2, trials = 5, prob = 0.5)
#'
#' # probability of 2 or less successes in 5 trials
#' bin_probability(success = 0:2, trials = 5, prob = 0.5)
bin_probability = function(success, trials, prob) {
check_trials(trials)
check_success(success, trials)
check_prob(prob)
bin = bin_choose(trials, success) * prob^success * (1 - prob)^(trials - success)
return(bin)
}
#' @title Binomial Distribution
#' @description Returns a table of the binomial distribution over all possible successes for a certain number of trials
#' @param trials number of trials
#' @param prob probability of success
#' @return probability of success for all successes given number of trials
#' @export
#' @examples
#' # binomial probability distribution
#' bin_distribution(trials = 5, prob = 0.5)
bin_distribution = function(trials, prob) {
check_trials(trials)
check_prob(prob)
success = 0:trials
probability = bin_probability(success, trials, prob)
dist = data.frame(success, probability)
class(dist) = c("bindis", "data.frame")
return(dist)
}
# Function plot.bindis() [method]
#' @export
plot.bindis = function(bindis) {
barplot(bindis$probability,
names.arg = bindis$success,
xlab = "successes", ylab = "probability")
}
#' @title Binomial Cumulative Distribution
#' @description Returns a table of the binomial probability distribution and the cumulative probability distribution.
#' @param trials number of trials
#' @param prob probability of success
#' @return table with probability distribution and cumulative distribution
#' @export
#' @examples
#' # binomial cumulative distribution
#' bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative = function(trials, prob) {
check_trials(trials)
check_prob(prob)
success = 0:trials
probability = bin_probability(success, trials, prob)
cumulative = rep(0, length(success))
cumulative[1] = probability[1]
for (i in 2:length(cumulative)) {
cumulative[i] = cumulative[i-1] + probability[i]
}
dist = data.frame(success, probability, cumulative)
class(dist) = c("bincum", "data.frame")
return(dist)
}
# Function plot.bincum() [method]
#' @export
plot.bincum = function(bincum) {
plot(x = bincum$success, y = bincum$cumulative,
type = "o",
xlab = "successes", ylab = "probability")
}
#' @title Binomial Random Variable
#' @description Creates a binomial random variable object given number of trials and probability
#' @param trials number of trials
#' @param prob probability of success
#' @return object of class "binvar", a binomial random variable
#' @export
#' @examples
#' # print bin_variable
#' bin1 = bin_variable(trials = 10, p = 0.3)
#' bin1
bin_variable = function(trials, prob) {
check_trials(trials)
check_prob(prob)
var = list(trials = trials, prob = prob)
class(var) = "binvar"
return(var)
}
# Function print.binvar() [method]
#' @export
print.binvar = function(x, ...) {
cat('"Binomial Variable"\n\n')
cat("Parameters", "\n")
cat("- number of trials:", x$trials, "\n")
cat("- prob of success:", x$prob, "\n")
invisible(x)
}
# Function summary.binvar() [method]
#' @export
summary.binvar = function(x, ...) {
summary = list(trials = x$trials, prob = x$prob,
mean = aux_mean(x$trials, x$prob),
variance = aux_variance(x$trials, x$prob),
mode = aux_mode(x$trials, x$prob),
skewness = aux_skewness(x$trials, x$prob),
kurtosis = aux_kurtosis(x$trials, x$prob))
class(summary) = "summary.binvar"
return(summary)
}
# Function print.summary.binvar() [method]
#' @export
print.summary.binvar = function(x, ...) {
cat('"Summary Binomial"\n\n')
cat("Parameters", "\n")
cat("- number of trials:", x$trials, "\n")
cat("- prob of success:", x$prob, "\n\n")
cat("Measures", "\n")
cat("- mean    :", x$mean, "\n")
cat("- variance:", x$variance, "\n")
cat("- mode    :", x$mode, "\n")
cat("- skewness:", x$skewness, "\n")
cat("- kurtosis:", x$kurtosis, "\n")
invisible(x)
}
X = bin_distribution(10, 0.5)
plot(X)
plot.bindis(X)
Y = bin_cumulative(10, 0.5)
plot(Y)
Z = bin_variable(10, 0.5)
summary(Z)
devtools::build_vignettes()
devtools::build()
devtools::install()
library(binomial)
??binomial
vignette(package = "binomial")
vignette(package = "binomial")
vignette(package = "dplyr")
devtools::build_vignettes()   # build vignettes
knitr::opts_chunk$set(echo = TRUE)
library(binomial)
# k = 2 successes in n = 5 trials
bin_choose(n = 5, k = 2)
# probability of getting 2 successes in 5 trials
bin_probability(success = 2, trials = 5, prob = 0.5)
# binomial probability distribution
dist = bin_distribution(trials = 5, prob = 0.5)
dist
# plot method
plot(dist)
# binomial cumulative distribution
cumdist = bin_cumulative(trials = 5, prob = 0.5)
cumdist
# plot method
plot(cumdist)
# binomial random variable
X = bin_variable(trials = 10, p = 0.3)
X
# summary method
summary(X)
# mean of distribution with trials = 10 and prob = 0.3
bin_mean(10, 0.3)
# variance of distribution with trials = 10 and prob = 0.3
bin_variance(10, 0.3)
# mode of distribution with trials = 10 and prob = 0.3
bin_mode(10, 0.3)
# skewness of distribution with trials = 10 and prob = 0.3
bin_skewness(10, 0.3)
# kurtosis of distribution with trials = 10 and prob = 0.3
bin_kurtosis(10, 0.3)
Sys.Date()
devtools::build_vignettes()   # build vignettes
devtools::install_github("gastonstat/cointoss")
devtools::install_github("gastonstat/cointoss", build_vignettes = TRUE)
??cointoss
library(cointoss)
vignette(package = "cointoss")
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
library(binomial)
vignette(package = "binomial")
